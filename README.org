* Authentication and Session Management Example: React + Express + PostgreSQL

** What is this?

This is an example application to demonstrate how authentication and session management can be done with a React + Express + PostgreSQL stack.

In the starter folder, an example app has been made but no authentication or session management has been implemented yet. Users exist in the database only as seed data and both signing in and registration is faked. This is typically how an app is developed, focusing on the more unique and important features first and leaving authentication for later.

The app being built is a very simple multi-user blog. Users can register or sign in, then create posts which each have a title and body of text. Posts are shown as a simple list, sorted by most recent. A user can edit or delete their own posts.

In order to keep the code relatively small, error messages are printed in the console instead of shown on the page.

** Setup

1. Install [[https://www.postgresql.org/download/][PostgreSQL]].
2. Create database and user "auth_example".
   #+begin_src sh
   $ psql -U postgres
   postgres=# CREATE DATABASE auth_example;
   postgres=# CREATE USER auth_example WITH PASSWORD '1234';
   postgres=# GRANT ALL PRIVILEGES ON DATABASE auth_example TO auth_example;
   postgres=# \q
   #+end_src
3. Install dependencies for both the backend and frontend.
   #+begin_src sh
   [~/react-express-postgres-auth]$ cd starter/frontend/
   [~/react-express-postgres-auth/starter/frontend]$ npm i
   [~/react-express-postgres-auth/starter/frontend]$ cd ../backend/
   [~/react-express-postgres-auth/starter/backend]$ npm i
   #+end_src
4. Create the tables.
   #+begin_src sh
   [~/react-express-postgres-auth/starter/backend]$ npm run builddb
   #+end_src
5. Seed the database. Since the starter doesn't include registration, we need to insert some dummy users into the database.
   #+begin_src sh
   [~/react-express-postgres-auth/starter/backend]$ npm run seeddb
   #+end_src

** Running the starter

Run the backend:
   #+begin_src sh
   [~/react-express-postgres-auth/starter/backend]$ npm start
   #+end_src

Run the frontend:
   #+begin_src sh
   [~/react-express-postgres-auth/starter/frontend]$ npm start
   #+end_src

** Implementing authentication and session management

Authentication and sessions should be managed primarily in the backend. That means the backend should create and store sessions, while the frontend only keeps track of a session ID.

1. Create a sessions table in the database. Each session should be associated with a user. A user may have more than one session at a time (signed in on multiple devices).

2. Update the ~POST /register~ route. A new user should be saved to the database if there is no duplicate username or email (this conflict can be checked by the database with the proper constraints). The password should be hashed/encrypted. Database functions should be created as needed.

3. Update the ~POST /signin~ route. If the username and password match a user's credentials from the database, create a new session and send back its ID as a cookie. A session ID should be unique and not predictable, and can be generated by the backend server or the database.

4. Update the ~POST /signout~ route. Delete the session from the database and the cookie.

5. Update the ~POST /posts~ route for creating a post. The session ID is received in a cookie and should be validated (make sure it exists in the database). Retrieve the user associated with the session and create the post with them as the author.

6. Create route for deleting a post: ~DELETE /posts/:postID~. A post may only be deleted by its author. The signed in user should be retrieved from the database by the given session ID from the cookie. Update frontend to use this route.

7. Create route for updating a post: ~PUT /posts/:postID~. A post may only be updated by its author. Update frontend to toggle editing and use this route to save the changes.

8. Bonus: use localStorage to make user data persist through page refresh on the frontend (so a signed in user doesn't need to sign in again when they refresh the page).
